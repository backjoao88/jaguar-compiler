package com.jag.parser;

/* ............................................................................................................................. */

action code {:

	TabelaSimbolos tabelaSimbolos = new TabelaSimbolos();

	int escopoAtual = 0;
	String tipoDadoAtual = null;
	String tipoAtual = null;

:}

/* ............................................................................................................................. */

	/* Terminais */

terminal 

IF, ABRIR_PAR, FECHAR_PAR, IDENTIFICADOR, ABRIR_BLOCO, FECHAR_BLOCO, OP_MENOR, OP_E, OP_MAIOR, OP_MAIORIGUAL, STRING, STRING_VAZIA, STRING_CHARAC, STRING_CHARAC_VAZIA, 
OP_MENORIGUAL, OP_COMPARACAO, OP_NOT, OP_OU, INT, REAL, BOOL, CHARAC, VOID, STR, RETURN, FUNCTION, VIRGULA, TRUE, FALSE, PONTO, OP_ATRIBUICAO, CONSTANTE,
OP_ADICAO, OP_SUBTRACAO, OP_DIV, OP_MULT, WHILE, FOR, IN, ELSE, ELIF, PRINT, INPUT;

	/* N�o Terminais */

non terminal 

Start, FuncDeclaration, Blocks, Block, IntegerLiteral, StrLiteral, CharacLiteral, BoolLiteral, Literal, FactorIntegerLiteral, RealLiteral ,
IfStmt, ExpRelational, ExpRelationalOperators, ExpLogical, ExpLogicalOperators, HigherExp, FuncTypes, ReturnBlock, Types, Parameters, Parameter, ExpAddSub,
ExpAddSubOperators, ExpMultDiv, ExpMultDivOperators, WhileStmt, ForStmt, ForTypes, ElseStmt, ElifStmt, AfterIfStmt, AtrFactor, InputStmt, InitializeVariable,
PrintStmt, EmptyTypes, VarDeclaration ;

	/* Declara��es */

Start ::= FuncDeclaration Start | /* */ ;
FuncDeclaration ::=  FUNCTION FuncTypes IDENTIFICADOR ABRIR_PAR Parameters FECHAR_PAR ABRIR_BLOCO {: tabelaSimbolos.novoEscopo()(); :} Blocks ReturnBlock FECHAR_BLOCO {: tabelaSimbolos.limparEscopo(); :} ;


FuncTypes ::= Types ;
FuncTypes ::= VOID ;

Types ::= 	INT					{: tipoDadoAtual = "INT";  :};
Types ::= 	REAL				{: tipoDadoAtual = "REAL";  :};
Types ::=	BOOL 				{: tipoDadoAtual = "BOOL";  :};
Types ::= 	CHARAC				{: tipoDadoAtual = "CHARAC";  :};
Types ::= 	STR					{: tipoDadoAtual = "STR";  :};


ReturnBlock ::= RETURN ExpLogical | /* � */ ;
Parameters ::= Types IDENTIFICADOR Parameter | /* empty */;
Parameter ::= VIRGULA Types IDENTIFICADOR Parameter | /* empty */ ;
ForTypes ::= INT | /* empty */ ;
EmptyTypes ::= Types | /* empty */ ; 	

VarDeclaration::= EmptyTypes IDENTIFICADOR:id {: tipoAtual = "IDENTIFICADOR"; :} InitializeVariable {: tabelaSimbolos.inserir(id.toString(), new Simbolo(id.toString(), tipoDadoAtual, tipoAtual)); :}; 

	/* Blocos */

Blocks ::= Block Blocks | /* � */ ;
Block ::= IfStmt | 

	  VarDeclaration | 

	  WhileStmt |

	  ForStmt | 

  	  InputStmt | 

	  PrintStmt;

	/* Statments */

IfStmt ::= IF ABRIR_PAR ExpLogical FECHAR_PAR ABRIR_BLOCO {: tabelaSimbolos.novoEscopo(); :} Blocks FECHAR_BLOCO {: tabelaSimbolos.limparEscopo(); :} AfterIfStmt ;
AfterIfStmt ::= ElseStmt | ElifStmt | /* empty */ ; 
ElseStmt ::= ELSE ABRIR_BLOCO {: tabelaSimbolos.novoEscopo(); :} Blocks FECHAR_BLOCO {: tabelaSimbolos.limparEscopo(); :} ; 
ElifStmt ::= ELIF ABRIR_PAR ExpLogical FECHAR_PAR ABRIR_BLOCO {: tabelaSimbolos.novoEscopo(); :} Blocks FECHAR_BLOCO  {: tabelaSimbolos.limparEscopo(); :} AfterIfStmt ;
WhileStmt ::= WHILE ABRIR_PAR ExpLogical FECHAR_PAR ABRIR_BLOCO {: tabelaSimbolos.novoEscopo(); :} Blocks FECHAR_BLOCO {: tabelaSimbolos.limparEscopo(); :}; 
ForStmt ::= FOR ABRIR_PAR ForTypes IDENTIFICADOR IN IDENTIFICADOR FECHAR_PAR ABRIR_BLOCO {: tabelaSimbolos.novoEscopo(); :} Blocks FECHAR_BLOCO {: tabelaSimbolos.limparEscopo(); :} ;
PrintStmt ::= PRINT ABRIR_PAR ExpLogical FECHAR_PAR ;
InputStmt ::= INPUT ABRIR_PAR Parameters FECHAR_PAR ; 
AtrFactor ::= PrintStmt | InputStmt | ExpLogical; 
InitializeVariable ::= OP_ATRIBUICAO AtrFactor | /* empty */ ; 

	/* Express�es */

ExpLogical ::= ExpRelational ExpLogicalOperators ;
ExpLogicalOperators ::= OP_E ExpLogical | 
			OP_OU ExpLogical | /* � */ ;

ExpRelational ::= ExpAddSub ExpRelationalOperators ;
ExpRelationalOperators ::= OP_MENOR ExpRelational |
			   OP_MAIOR ExpRelational |
			   OP_MAIORIGUAL ExpRelational |
			   OP_MENORIGUAL ExpRelational |
			   OP_COMPARACAO ExpRelational | /* � */ ;

ExpAddSub ::= ExpMultDiv ExpAddSubOperators ;
ExpAddSubOperators ::= OP_ADICAO ExpAddSub 
			 | OP_SUBTRACAO ExpAddSub
			 | /* empty */;

ExpMultDiv ::= HigherExp ExpMultDivOperators;
ExpMultDivOperators ::= OP_MULT ExpMultDiv
			   | OP_DIV ExpMultDiv
			   | /* empty */;

HigherExp ::= ABRIR_PAR ExpLogical FECHAR_PAR | OP_NOT HigherExp | IDENTIFICADOR | Literal;

Literal ::= IntegerLiteral | StrLiteral | BoolLiteral | CharacLiteral ;
IntegerLiteral ::= CONSTANTE FactorIntegerLiteral ;
FactorIntegerLiteral ::= PONTO RealLiteral | /* empty */ ;
RealLiteral ::= CONSTANTE;
StrLiteral ::= STRING | STRING_VAZIA ;
CharacLiteral ::= STRING_CHARAC | STRING_CHARAC_VAZIA ;
BoolLiteral ::= TRUE | FALSE ;


